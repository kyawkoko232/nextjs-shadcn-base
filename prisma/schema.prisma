generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  sessions    Session[]
  accounts    Account[]
  members     Member[]
  invitations Invitation[] @relation("InviterUser")
  posts       Post[]       @relation("PostAuthor")
  comments    Comment[]
  postViews   PostView[]

  @@map("user")
}

model Session {
  id                   String   @id
  expiresAt            DateTime
  token                String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  ipAddress            String?
  userAgent            String?
  userId               String
  activeOrganizationId String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  slug      String?  @unique
  logo      String?
  type      String? // "blog", "shop", "vendor", "live" etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  metadata  Json?

  members     Member[]
  invitations Invitation[]
  posts       Post[]
  categories  Category[]

  @@map("organization")
}

model Member {
  id             String   @id @default(cuid())
  organizationId String
  userId         String
  roleId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Restrict)

  @@unique([organizationId, userId])
  @@map("member")
}

model Invitation {
  id             String   @id @default(cuid())
  organizationId String
  email          String
  roleId         String
  status         String   @default("pending")
  expiresAt      DateTime
  inviterId      String
  createdAt      DateTime @default(now())

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  inviter      User         @relation("InviterUser", fields: [inviterId], references: [id], onDelete: Cascade)
  role         Role         @relation(fields: [roleId], references: [id], onDelete: Restrict)

  @@map("invitation")
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  members         Member[]
  rolePermissions RolePermission[]
  invitations     Invitation[]
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
}

model RolePermission {
  id           String @id @default(cuid())
  roleId       String
  permissionId String

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Category {
  id             String   @id @default(cuid())
  name           String
  slug           String
  description    String?
  organizationId String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  posts        Post[]

  @@unique([slug, organizationId])
  @@map("category")
}

model Post {
  id             String     @id @default(cuid())
  title          String
  slug           String
  content        String
  excerpt        String?
  featuredImage  String?
  status         PostStatus @default(draft)
  visibility     Visibility @default(public)
  publishedAt    DateTime?
  organizationId String
  authorId       String
  categoryId     String?
  viewCount      Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @default(now()) @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  author       User         @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  category     Category?    @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  comments     Comment[]
  views        PostView[]
  tags         PostTag[]

  @@unique([slug, organizationId])
  @@map("post")
}

enum PostStatus {
  draft
  published
  archived
}

enum Visibility {
  public
  private
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post    Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent  Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies Comment[] @relation("CommentReplies")

  @@map("comment")
}

model Tag {
  id    String    @id @default(cuid())
  name  String    @unique
  slug  String    @unique
  posts PostTag[]

  @@map("tag")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tag")
}

model PostView {
  id        String   @id @default(cuid())
  postId    String
  userId    String? // Null for anonymous views
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("post_view")
}
