generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id
  name          String
  email         String   @unique
  emailVerified Boolean  @default(false)
  image         String?
  role          Role     @default(member) // Simple role enum
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  // Relations
  sessions      Session[]
  accounts      Account[]
  posts         Post[]       @relation("PostAuthor")
  comments      Comment[]
  postViews     PostView[]

  @@map("user")
}

enum Role {
  member  // Can read posts, comment
  author  // Can create/edit own posts
  admin   // Full manage posts
  superAdmin // Full manage posts and users
}
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @default(now()) @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relations
  posts Post[]

  @@map("category")
}

enum PostStatus {
  draft
  published
  archived
}

model Post {
  id            String     @id @default(cuid())
  title         String
  slug          String
  content       String
  excerpt       String?
  featuredImage String?
  status        PostStatus @default(draft)
  publishedAt   DateTime?
  categoryId    String?
  authorId      String
  viewCount     Int        @default(0)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt

  // Relations
  author    User       @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  category  Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  comments  Comment[]
  views     PostView[]
  tags      PostTag[]

  @@unique([slug])
  @@map("post")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  parentId  String?  // For nested comments
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  // Relations
  post     Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comment")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  slug  String @unique

  // Relations
  posts PostTag[]

  @@map("tag")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String

  // Relations
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tag")
}

model PostView {
  id        String   @id @default(cuid())
  postId    String
  userId    String?  // Null for anonymous views
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("post_view")
}
